{"version":3,"sources":["serviceWorkerRegistration.js","reportWebVitals.js","components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","actions.js","api/api.js","containers/App.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","CounterButton","updateCount","setState","count","nextProps","nextState","this","className","style","color","props","onClick","Component","Header","Card","id","name","email","alt","src","CardList","robots","map","Error","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","overflowY","border","height","children","ErrorBoundry","hasError","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","setRequestRobots","dispatch","url","fetch","res","json","data","payload","err","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","connect","searchRobots","requestRobots","event","text","target","value","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.18149f00.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from \"react\";\nimport \"./CounterButton.css\";\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      console.log(nextProps, nextState);\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState((state) => {\n      return { count: state.count + 1 };\n    });\n  };\n\n  render() {\n    return (\n      <button\n        className=\"count-button\"\n        style={{ color: this.props.color }}\n        onClick={this.updateCount}\n      >\n        Count : {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;\n","import React, { Component } from \"react\";\nimport CounterButton from \"./CounterButton\";\n\n// In most cases, instead of writing shouldComponentUpdate()\n// by hand, you can inherit from React.PureComponent. It is\n// equivalent to implementing shouldComponentUpdate() with a\n// shallow comparison of current and previous props and state.\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color=\"aqua\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  if (!robots) {\n    return new Error(\"Nooooooo!\");\n  }\n  return (\n    <div>\n      {robots.map(({ id, name, email }) => (\n        <Card key={id} id={id} name={name} email={email} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","const SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        aria-label=\"Search Robots\" // for accessibility purposes\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"1px solid black\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  // static getDerivedStateFromError()はエラーがスローされたあとにフォールバックUIをレンター\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  /*\n  /// componentDidCatch()はエラー情報をログに記録するために使用\n  componentDidCatch(error, errorInfo) {\n    logErrorToMyService(error, errorInfo);\n  }\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  } でも動作する\n  */\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","import { apiCall } from \"./api/api.js\";\nimport {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants.js\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const setRequestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  apiCall(\"https://jsonplaceholder.typicode.com/users\")\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","export const apiCall = (url) => fetch(url).then((res) => res.json());\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport Header from \"../components/Header\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"./App.css\";\n\nimport { setSearchField, setRequestRobots } from \"../actions\";\n\n// state系のpropsをconnectでAppへ渡す\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\n// method系のpropsをconnectでAppへ渡す\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(setRequestRobots()),\n    // setRequestRobots()(dispatch)でも同じ動作をする\n  };\n};\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {isPending ? (\n            <h1>Loading...</h1>\n          ) : (\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          )}\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // return { ...state, searchField: action.payload }でも可\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      // return { ...state, robots: action.payload, isPending: false } または\n      // return { ...state, ...{robots: action.payload, isPending: false} } でも可\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import \"./wdyr\"; // not sure whether it's working\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport { searchRobots, requestRobots } from \"./reducers\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n// applyMiddleware(logger)の代わりに下記のコードに変えるとChrome ExtentionのRedux devtoolsが使える\n//  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}